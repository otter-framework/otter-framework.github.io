<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Case Study on</title><link>https://otter-framework.dev/docs/case-study/</link><description>Recent content in Case Study on</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Tue, 06 Oct 2020 08:48:45 +0000</lastBuildDate><atom:link href="https://otter-framework.dev/docs/case-study/index.xml" rel="self" type="application/rss+xml"/><item><title>Introduction</title><link>https://otter-framework.dev/docs/case-study/introduction/</link><pubDate>Tue, 06 Oct 2020 08:48:57 +0000</pubDate><guid>https://otter-framework.dev/docs/case-study/introduction/</guid><description>Otter is a drop-in, cloud native framework for peer-to-peer video communication within web applications. It can be deployed to AWS with a single command and is ideal for web applications with real-time video communication needs.
For an application developer, Otter abstracts away the complexity of establishing a resilient, scalable infrastructure, and provides a simple way to integrate peer-to-peer WebRTC video calling into an application where privacy is of utmost importance.</description></item><item><title>How WebRTC Works</title><link>https://otter-framework.dev/docs/case-study/web-rtc/</link><pubDate>Tue, 06 Oct 2020 08:48:57 +0000</pubDate><guid>https://otter-framework.dev/docs/case-study/web-rtc/</guid><description>How do Peers Connect? #
Let’s look at a high-level workflow of how a direct connection can be established between two peers. We will use an analogy of a peer Alice sending physical mail to another peer Bob.
How does Alice know where to address her mail to?
Alice will need some mechanism to exchange addresses with Bob to facilitate the delivery, which is known as signaling. This could be a text message or even a pigeon carrier.</description></item><item><title>Existing Solutions</title><link>https://otter-framework.dev/docs/case-study/existing-solutions/</link><pubDate>Tue, 06 Oct 2020 08:48:57 +0000</pubDate><guid>https://otter-framework.dev/docs/case-study/existing-solutions/</guid><description>WebRTC is a flexible solution for P2P real-time communication, but the trade-off of this flexibility is that a developer has to deal with the complexity of implementing critical components such as signaling and STUN/TURN servers. In addition, another layer of complexity is introduced when working with the WebRTC API.
To implement a P2P WebRTC solution, developers can take the DIY route and stitch together existing open-source solutions (PeerJS, CoTURN, etc). However, the developer would still need to configure and maintain all the necessary infrastructure to host their solution.</description></item><item><title>How Otter is Built</title><link>https://otter-framework.dev/docs/case-study/how-otter-is-built/</link><pubDate>Tue, 06 Oct 2020 08:48:57 +0000</pubDate><guid>https://otter-framework.dev/docs/case-study/how-otter-is-built/</guid><description>Otter is a P2P video calling solution that can easily be integrated into new or existing web applications by developers. Otter’s infrastructure is deployed to the AWS Cloud and relies heavily on the serverless paradigm.
Otter is composed of the following:
An easy-to-use CLI that automates the deployment and tear-down of the infrastructure. A minimalistic API to allow developers to integrate Otter’s functionality within their own web application. A simple web application for P2P calls with audio and video, instant messaging and file exchange.</description></item><item><title>Engineering Challenges</title><link>https://otter-framework.dev/docs/case-study/engineering-challenges/</link><pubDate>Tue, 06 Oct 2020 08:48:57 +0000</pubDate><guid>https://otter-framework.dev/docs/case-study/engineering-challenges/</guid><description>The following is an in-depth discussion of 4 interesting engineering challenges we faced while building Otter.
WebRTC and Glare #
One challenge we faced working with the WebRTC API involved asynchronicity and race conditions. Ideally, the offer-answer process happens in an orderly fashion: one peer sends an offer, the other peer receives it and sends back an answer (if the other peer wishes to establish a P2P connection).
In practice, however, both peers can end up firing offers to each other in a haphazard fashion.</description></item><item><title>Future Work</title><link>https://otter-framework.dev/docs/case-study/future-work/</link><pubDate>Tue, 06 Oct 2020 08:48:57 +0000</pubDate><guid>https://otter-framework.dev/docs/case-study/future-work/</guid><description>Even though Otter is a fully functional framework, we are still working on additional features.
First Improvement #
Currently, CoTURN is deployed within a single AWS region. Ideally, we would like to deploy CoTURN in multiple AWS regions and have clients access the nearest cluster of CoTURN servers through a geographical DNS resolution. The goal being to reduce the distance (i.e., latency) between end users and the relay server when required.</description></item><item><title>References</title><link>https://otter-framework.dev/docs/case-study/references/</link><pubDate>Tue, 06 Oct 2020 08:48:57 +0000</pubDate><guid>https://otter-framework.dev/docs/case-study/references/</guid><description> https://webrtcforthecurious.com/ https://hpbn.co/webrtc/ https://webrtc.org/ https://www.w3.org/TR/webrtc/ https://www.rfc-editor.org/rfc/rfc8489.html https://www.rfc-editor.org/rfc/rfc8656.html https://www.rfc-editor.org/rfc/rfc8445 https://www.rfc-editor.org/rfc/rfc2663 https://bloggeek.me/state-of-webrtc-open-source-projects/ https://docs.expertflow.com/chat/3.18/hybrid-chat-deployment/turn-server-deployment-guide</description></item></channel></rss>